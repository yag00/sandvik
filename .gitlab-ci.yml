image: ubuntu:24.04

stages:
  - configure
  - build

default:
  before_script:
    - apt-get update && apt-get install -y curl unzip git doxygen graphviz clang gcc g++ pkg-config cmake python3 python-is-python3 python3-jinja2 python3-requests autoconf automake libtool autotools-dev texinfo openjdk-21-jdk

variables:
  WAF_CONFIG_CACHE_KEY: "waf-config"
  BUILD_DIR: "wbuild"
  INSTALL_DIR: "delivery"

configure:
  stage: configure
  script:
    - ./waf configure
  cache:
    key: "${WAF_CONFIG_CACHE_KEY}"
    paths:
      - "ext"
      - "${BUILD_DIR}"
      - .lock-waf_linux_build
    policy: pull-push


package:
  stage: build
  script:
    - ./waf build
    - ./waf install
    # Download sonar-scanner
    - curl -sSLo ./sonar-scanner.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip'
    - unzip -o sonar-scanner.zip
    - mv sonar-scanner-7.2.0.5079-linux-x64 sonar-scanner
    - sonar-scanner/bin/sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.compile-commands=wbuild/compile_commands.json
  dependencies:
    - configure
  cache:
    key: "${WAF_CONFIG_CACHE_KEY}"
    paths:
      - "ext"
      - "${BUILD_DIR}"
      - .lock-waf_linux_build
    policy: pull
  artifacts:
    paths:
      - "${INSTALL_DIR}/"
  only:
    - merge_requests
    - main
    - develop

tests:
  stage: build
  script:
    - ./waf build --tests
  dependencies:
    - configure
  cache:
    key: "${WAF_CONFIG_CACHE_KEY}"
    paths:
      - "ext"
      - "${BUILD_DIR}"
      - .lock-waf_linux_build
    policy: pull
