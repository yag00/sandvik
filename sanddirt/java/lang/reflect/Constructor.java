package java.lang.reflect;
/**
 * @@sandvik modified
 * {@code Constructor} provides information about, and access to, a single
 * constructor for a class.
 *
 * <p>{@code Constructor} permits widening conversions to occur when matching the
 * actual parameters to newInstance() with the underlying
 * constructor's formal parameters, but throws an
 * {@code IllegalArgumentException} if a narrowing conversion would occur.
 *
 * @param <T> the class in which the constructor is declared
 *
 * @see Member
 * @see java.lang.Class
 * @see java.lang.Class#getConstructors()
 * @see java.lang.Class#getConstructor(Class[])
 * @see java.lang.Class#getDeclaredConstructors()
 *
 * @author      Kenneth Russell
 * @author      Nakul Saraiya
 */
public class Constructor<T> extends java.lang.reflect.AccessibleObject {
    private int methodInfo;
    /**
     * Indicates if the constructor is equal to another.
     * @param other constructor to compare to
     * @return true if constructors are equals
     */
    public native boolean equals(java.lang.Object other);
    /**
     * Return the class of the constructor.
     * @return class of the constructor
     */
    public native java.lang.Class<T> getDeclaringClass();
    /**
     * Return the modifiers of the constructor.
     * @return integer that represents a {@code logical or} of modifiers
     */
    public native int getModifiers();
    /**
     * Return the name of the constructor.
     * @return name of the constructor
     */
    public native java.lang.String getName();
    /**
     * Return the classes representing the parameter types of the constructor.
     * @return array of type of the parameters
     */
    public native java.lang.Class<?>[] getParameterTypes();
    /**
     * Return the hashCode of the constructor.
     * @return hashCode value
     */
    public native int hashCode();
    /**
     * Indicates if the constructor is generated by the compiler.
     * @return true if generated by the compiler
     */
    public native boolean isSynthetic();
    /**
     * Indicates if the constructor takes a variable number of arguments.
     * @return true if variable number of arguments
     */
    public native boolean isVarArgs();
    /**
     * Invoke the constructor with specified parameter's values.
     * @param params array of parameter's values
     * @return an instance of the class of the constructor
     * @throws IllegalArgumentException if parameters values are not compatible with parameters type
     *     of the constructor
     */
    public native T newInstance(java.lang.Object... params) throws IllegalArgumentException;
    /**
     * Return a representation string of the method.
     * @return a representation string of the method
     */
    public native java.lang.String toString();
}
